package edu.grinnell.csc207.soundsofsorting.sorts;

import java.util.List;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;

import edu.grinnell.csc207.soundsofsorting.sortevents.CompareEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.CopyEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.SortEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.SwapEvent;

/**
 * A collection of sorting algorithms.
 */
public class Sorts {
    /**
     * Swaps indices <code>i</code> and <code>j</code> of array <code>arr</code>.
     * @param <T> the carrier type of the array
     * @param arr the array to swap
     * @param i the first index to swap
     * @param j the second index to swap
     */
    public static <T> void swap(T[] arr, int i, int j) {
        T tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    /**
     * Sorts the array according to the bubble sort algorithm:
     * <pre>
     * [ unprocessed | i largest elements in order ]
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> bubbleSort(T[] arr) {
        List<SortEvent<T>> lst = new ArrayList<>();
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr.length - 1; j++) {
                
                lst.add(new CompareEvent<>(j, j + 1));
                int compare = arr[j].compareTo(arr[j+1]);
                if(compare > 0) {
                    swap(arr, j, j+1);
                    lst.add(new SwapEvent<>(j, j + 1));
                }
            }
        }
        return lst;
    }

    /**
     * Sorts the array according to the selection sort algorithm:
     * <pre>
     * [ i smallest elements in order | unprocessed ]
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> selectionSort(T[] arr) {
        List<SortEvent<T>> lst = new ArrayList<>();
        for (int i = 0; i < arr.length; i++) {
            int minIdx = i;
            for (int j = i; j < arr.length; j++) {

                lst.add(new CompareEvent<>(j, minIdx));
                int compare = arr[j].compareTo(arr[minIdx]);
                if (compare < 0) {
                    minIdx = j;
                }
            }
            swap(arr, i, minIdx);
            lst.add(new SwapEvent<>(i, minIdx));
        }
        return lst;
    }

    /**
     * Sorts the array according to the insertion sort algorithm:
     * <pre>
     * [ i elements in order | unprocessed ] 
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> insertionSort(T[] arr) {
        List<SortEvent<T>> lst = new ArrayList<>();
        for (int i = 1; i < arr.length; i++) {
            for (int j = 0; j < i; j++) {

                lst.add(new CompareEvent<>(j, i));
                int compare = arr[j].compareTo(arr[i]);
                if (compare >= 0) {
                    T curVal = arr[i];
                    for (int k = i; k > j; k--) {
                        arr[k] = arr[k-1];
                    }
                    arr[j] = curVal;
                }
            }
        }
        return lst;
    }

    /**
     * Sorts the array according to the merge sort algorithm.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> void merge(T[] arr, int b1, int e1, int b2, int e2, List<SortEvent<T>> lst) {

        // @SuppressWarnings("unchecked")
        // T[] copy = (T[]) new Object[arr.length]; // Couldn't be casted to type Comparable? this way :(
        T[] copy = Arrays.copyOf(arr, arr.length); 
        int index = b1;
        while (b1 < e1 && b2 < e2) {

            lst.add(new CompareEvent<>(b1, b2));
            if (arr[b1].compareTo(arr[b2]) < 0) {
                lst.add(new CopyEvent<>(b1, index, arr[b1]));
                copy[index] = arr[b1];
                b1++;
            } else {
                lst.add(new CopyEvent<>(b2, index, arr[b2]));
                copy[index] = arr[b2];
                b2++;
            }
            index++;
        }
        while (b1 < e1) {
            lst.add(new CopyEvent<>(b1, index, arr[b1]));
            copy[index] = arr[b1];
            b1++;
            index++;
        }
        while (b2 < e2) {
            lst.add(new CopyEvent<>(b2, index, arr[b2]));
            copy[index] = arr[b2];
            b2++;
            index++;
        }

        for (int i = 0; i < arr.length; i++) {
            lst.add(new CopyEvent<>(i, i, copy[i]));
            arr[i] = copy[i];
        }

    }

    public static <T extends Comparable<? super T>> void splice(T[] arr, int begin, int end, List<SortEvent<T>> lst) {
        
        int middle = begin + (end - begin) / 2;
    
        if (end - begin > 1) {
            splice(arr, begin, middle, lst);
            splice(arr, middle, end, lst);
        }

        // Merge function here
        merge(arr, begin, middle, middle, end, lst);
    }

    public static <T extends Comparable<? super T>> List<SortEvent<T>> mergeSort(T[] arr) {
        List<SortEvent<T>> lst = new ArrayList<>();
        int begin = 0;
        int end = arr.length;
        splice(arr, begin, end, lst);
        return lst;
    }

    /**
     * Sorts the array according to the quick sort algorithm.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> void pivot(T[] arr, int begin, int end, List<SortEvent<T>> lst) {
        
        if (begin >= end - 1) {
            return;
        }
        if (begin == end - 2) {

            lst.add(new CompareEvent<>(begin, end - 1));
            if (arr[begin].compareTo(arr[end - 1]) > 0) {
                lst.add(new SwapEvent<>(begin, end - 1));
                swap(arr, begin, end - 1);

            }
            return;
        }
        int middle = begin + (end - begin) / 2;
        int pivIdx;

        lst.add(new CompareEvent<>(begin, middle));
        if (arr[begin].compareTo(arr[middle]) > 0) { // begin > middle
            lst.add(new CompareEvent<>(middle, end - 1));
            if (arr[middle].compareTo(arr[end - 1]) > 0) { // middle > end
                pivIdx = middle;
            } 
            else if (arr[middle].compareTo(arr[end - 1]) < 0 && arr[begin].compareTo(arr[end - 1]) > 0) { // middle < end and begin > end a.k.a. middle < end < begin
                pivIdx = end - 1;
            } 
            else {
                pivIdx = begin;
            }
        }
        else { // begin < middle
            lst.add(new CompareEvent<>(middle, end - 1));
            if (arr[middle].compareTo(arr[end - 1]) < 0) { // middle < end
                pivIdx = middle;
            } else if (arr[middle].compareTo(arr[end - 1]) > 0 && arr[begin].compareTo(arr[end - 1]) > 0) { // middle > end and begin > end a.k.a. end < begin < middle
                pivIdx = begin;
            } else {
                pivIdx = end - 1;
            }
        }
        lst.add(new SwapEvent<>(pivIdx, end - 1));
        swap(arr, pivIdx, end - 1); 

        pivIdx = end - 1;
        T pivot = arr[pivIdx];
        int lIdx = begin;
        int rIdx = pivIdx - 1;

        while (lIdx < rIdx) { // while Left index is on the left of the Right index

            lst.add(new CompareEvent<>(lIdx, pivIdx));
            while (lIdx < rIdx && arr[lIdx].compareTo(pivot) <= 0) {
                lIdx++;
            }
            lst.add(new CompareEvent<>(lIdx, pivIdx));
            while (lIdx < rIdx && arr[rIdx].compareTo(pivot) >= 0){
                rIdx--;
            }
            if (arr[lIdx].compareTo(pivot) > 0 && arr[rIdx].compareTo(pivot) < 0) {
                lst.add(new SwapEvent<>(lIdx, rIdx));
                swap(arr, lIdx, rIdx);
            }
        }
        lst.add(new SwapEvent<>(rIdx, pivIdx));
        swap(arr, rIdx, pivIdx);

        pivot(arr, begin, rIdx, lst);
        pivot(arr, rIdx + 1, end, lst);
    }

    public static <T extends Comparable<? super T>> List<SortEvent<T>> quickSort(T[] arr) {
        List<SortEvent<T>> lst = new ArrayList<>();
        int begin = 0;
        int end = arr.length;
        pivot(arr, begin, end, lst);
        return lst;
    }

    public static <T extends Comparable<? super T>> List<SortEvent<T>> eventSort(T[] arr) {
        List<SortEvent<T>> lst = new ArrayList<>();
        int index = 1;
        while (index < arr.length) {
            lst.add(new CompareEvent<>(index - 1, index));
            if (index == 0 || arr[index - 1].compareTo(arr[index]) <= 0) {
                index++;
            }
            else {
                lst.add(new SwapEvent<>(index - 1, index));
                swap(arr, index - 1, index);
                index--;
            }
        }
        return lst;
    }
}
